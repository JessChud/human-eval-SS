{"task_id": "HumanEval/0", "completion": "numbers.sort()\nfor i in range(len(numbers) - 1):\n    if abs(numbers[i] - numbers[i + 1]) < threshold:\n        return True\nreturn False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/1", "completion": "paren_string = \"( ) (( )) (( )( ))\"\nresult = []\ncurrent_group = \"\"\nopen_braces = 0\n\nfor char in paren_string:\n    if char == \"(\":\n        open_braces += 1\n    elif char == \")\":\n        open_braces -= 1\n    current_group += char\n    \n    if open_braces == 0:\n        result.append(current_group.replace(\" \", \"\"))\n        current_group = \"\"\n\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/2", "completion": "number_str = str(number)\ninteger_part, decimal_part = number_str.split('.')\nresult = float('0.' + decimal_part)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/3", "completion": "operations = [1, 2, 3]\nbalance = 0\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        print(True)\n        break\nelse:\n    print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/4", "completion": "numbers = [1.0, 2.0, 3.0, 4.0]\nmean = sum(numbers) / len(numbers)\nmad = sum(abs(x - mean) for x in numbers) / len(numbers)\nmad", "result": "timed out", "passed": false}
{"task_id": "HumanEval/5", "completion": "numbers = [1, 2, 3]\ndelimeter = 4\nresult = [val for pair in zip(numbers, [delimeter] * (len(numbers) - 1)) for val in pair] + [numbers[-1]] if numbers else []", "result": "timed out", "passed": false}
{"task_id": "HumanEval/6", "completion": "paren_string = input().split()\nresult = []\nfor group in paren_string:\n    max_depth = 0\n    depth = 0\n    for char in group:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n    result.append(max_depth)\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/7", "completion": "strings = ['abc', 'bacd', 'cde', 'array']\nsubstring = 'a'\n\nfiltered_strings = [s for s in strings if substring in s]\n\nprint(filtered_strings)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/8", "completion": "numbers = [1, 2, 3, 4]\nsum_result = sum(numbers) if numbers else 0\nproduct_result = 1\nfor num in numbers:\n    product_result *= num\n(sum_result, product_result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/9", "completion": "```python\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - len(window):\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result\n```", "result": "timed out", "passed": false}
{"task_id": "HumanEval/10", "completion": "string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    suffix = ''\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            suffix = string[i:]\n            break\n    return string + string[:i][::-1]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/11", "completion": "a = int(a, 2)\nb = int(b, 2)\nresult = a ^ b\nreturn bin(result)[2:].zfill(len(a))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/12", "completion": "strings = ['a', 'b', 'c']\nlongest_str = None\nmax_length = 0\n\nfor s in strings:\n    if len(s) > max_length:\n        max_length = len(s)\n        longest_str = s\n\nlongest_str", "result": "timed out", "passed": false}
{"task_id": "HumanEval/13", "completion": "if b == 0:\n    return a\nelse:\n    return greatest_common_divisor(b, a % b)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/14", "completion": "string = 'abc'\noutput = [string[:i+1] for i in range(len(string))]\nprint(output)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/15", "completion": "output = ' '.join(map(str, range(n+1)))\nprint(output)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/16", "completion": "string = input().lower()\ndistinct_characters = len(set(string))\nprint(distinct_characters)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/17", "completion": "music_string = 'o o| .| o| o| .| .| .| .| o o'\nnotes = music_string.split()\nresult = []\n\nfor note in notes:\n    if note == 'o':\n        result.append(4)\n    elif note == 'o|':\n        result.append(2)\n    elif note == '.|':\n        result.append(1)\n\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "result": "timed out", "passed": false}
{"task_id": "HumanEval/19", "completion": "numbers_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\nnumbers_list = numbers.split()\nnumbers_list.sort(key=lambda x: numbers_map[x])\nresult = ' '.join(numbers_list)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\nmin_diff = min(numbers[i+1] - numbers[i] for i in range(len(numbers) - 1))\nresult = [(numbers[i], numbers[i+1]) for i in range(len(numbers) - 1) if numbers[i+1] - numbers[i] == min_diff][0]\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/21", "completion": "numbers_min = min(numbers)\nnumbers_max = max(numbers)\nreturn [(x - numbers_min) / (numbers_max - numbers_min) for x in numbers]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/22", "completion": "values = [value for value in values if isinstance(value, int)]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/23", "completion": "string = \"abc\"\nprint(len(string))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/24", "completion": "if n < 2:\n    return None\nfor i in range(n-1, 1, -1):\n    if n % i == 0:\n        return i", "result": "timed out", "passed": false}
{"task_id": "HumanEval/25", "completion": "n = int(input())\nfactors = []\ndivisor = 2\nwhile n > 1:\n    if n % divisor == 0:\n        factors.append(divisor)\n        n //= divisor\n    else:\n        divisor += 1\nprint(factors)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/26", "completion": "numbers = [1, 2, 3, 2, 4]\nresult = []\n[result.append(num) for num in numbers if numbers.count(num) == 1]\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/27", "completion": "string = \"Hello\"\nresult = \"\".join([char.lower() if char.isupper() else char.upper() for char in string])\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/28", "completion": "strings = ['a', 'b', 'c']\nresult = ''.join(strings)\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/29", "completion": "strings = ['abc', 'bcd', 'cde', 'array']\nprefix = 'a'\n\nfiltered_strings = [s for s in strings if s.startswith(prefix)]\n\nprint(filtered_strings)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/30", "completion": "l = [-1, 2, -4, 5, 6]\nresult = [num for num in l if num > 0]\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/31", "completion": "n = 13441\nif n < 2:\n    print(False)\nelse:\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            print(False)\n            break\n    else:\n        print(True)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/32", "completion": "xs = [1, 2]\nx = -xs[0] / xs[1]\n\nxs = [-6, 11, -6, 1]\nx = 1.0", "result": "timed out", "passed": false}
{"task_id": "HumanEval/33", "completion": "l = [l[i] if i % 3 != 0 else sorted(l[i:i+3])[j] for i in range(len(l)) for j in range(3) if i % 3 == 0 or j != 0]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/34", "completion": "l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\nprint(sorted(list(set(l))))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/35", "completion": "l = [1, 2, 3]\nprint(max(l))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/36", "completion": "count = 0\nfor i in range(1, n):\n    if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n        count += 1\ncount", "result": "timed out", "passed": false}
{"task_id": "HumanEval/37", "completion": "l = [l[i] if i % 2 != 0 else sorted(l[::2])[i//2] for i in range(len(l))]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/38", "completion": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\ngroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/39", "completion": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    fib = [0, 1]\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    primes = [num for num in fib if is_prime(num)]\n    return primes[n - 1]\n```", "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "completion": "l.sort()\nn = len(l)\nfor i in range(n-2):\n    left = i + 1\n    right = n - 1\n    while left < right:\n        total = l[i] + l[left] + l[right]\n        if total == 0:\n            print(True)\n            break\n        elif total < 0:\n            left += 1\n        else:\n            right -= 1\n    else:\n        continue\n    break\nelse:\n    print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/41", "completion": "n = 5\nprint(n)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/42", "completion": "l = [x + 1 for x in l]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/43", "completion": "l = [1, 3, 5, 0]\nprint(any(-x in l for x in l if x != 0))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/44", "completion": "x, base = 8, 3\nresult = \"\"\nwhile x > 0:\n    result = str(x % base) + result\n    x //= base\nresult = result if result else \"0\"\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/45", "completion": "area = 0.5 * a * h\nprint(area)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/46", "completion": "n = 7\nfib = [0, 0, 2, 0]\nfor i in range(4, n+1):\n    fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\nprint(fib[n])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/47", "completion": "l.sort()\nn = len(l)\nif n % 2 == 0:\n    median = (l[n//2 - 1] + l[n//2]) / 2\nelse:\n    median = l[n//2]\nmedian", "result": "timed out", "passed": false}
{"task_id": "HumanEval/48", "completion": "text = text.lower().replace(\" \", \"\")\nreturn text == text[::-1]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/49", "completion": "```python\nprint(pow(2, n, p))\n```", "result": "timed out", "passed": false}
{"task_id": "HumanEval/50", "completion": "encode_shift = lambda s: \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndecode_shift = lambda s: \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/51", "completion": "text = \"abcdef\\nghijklm\"\nresult = \"\".join([char for char in text if char.lower() not in \"aeiou\"])\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/52", "completion": "l = [1, 2, 4, 10]\nt = 100\nprint(all(num < t for num in l))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/53", "completion": "x: int, y: int) -> int:\n    return x + y", "result": "timed out", "passed": false}
{"task_id": "HumanEval/54", "completion": "if sorted(s0) == sorted(s1):\n    return True\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/55", "completion": "a, b = 0, 1\nfor _ in range(n):\n    a, b = b, a + b\nprint(a)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "result": "timed out", "passed": false}
{"task_id": "HumanEval/57", "completion": "l = [1, 2, 4, 20]\nprint(all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\nl = [1, 20, 4, 10]\nprint(all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\nl = [4, 1, 0, -10]\nprint(all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/58", "completion": "l1_set = set(l1)\nl2_set = set(l2)\ncommon_elements = sorted(list(l1_set.intersection(l2_set)))\nreturn common_elements", "result": "timed out", "passed": false}
{"task_id": "HumanEval/59", "completion": "max_prime = 2\nwhile n % 2 == 0:\n    n //= 2\nfor i in range(3, int(n**0.5)+1, 2):\n    while n % i == 0:\n        max_prime = i\n        n //= i\nif n > 2:\n    max_prime = n\nprint(max_prime)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/60", "completion": "total = n * (n + 1) // 2\nreturn total", "result": "timed out", "passed": false}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "result": "timed out", "passed": false}
{"task_id": "HumanEval/62", "completion": "result = [xs[i] * i for i in range(1, len(xs))]\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/63", "completion": "n = int(input())\na, b, c = 0, 0, 1\nfor _ in range(2, n):\n    a, b, c = b, c, a + b + c\nprint(b)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/64", "completion": "s = \"abcde\"\nprint(sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1)))\n\ns = \"ACEDY\"\nprint(sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1)))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/65", "completion": "x = str(x)\nshift = shift % len(x)\nresult = x[-shift:] + x[:-shift] if shift > 0 else x[::-1]\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/66", "completion": "s = \"abAB\"\nresult = sum(ord(char) for char in s if char.isupper())", "result": "timed out", "passed": false}
{"task_id": "HumanEval/67", "completion": "s = s.split()\napples = int(s[0])\noranges = int(s[3])\nmango = n - apples - oranges\nreturn mango", "result": "timed out", "passed": false}
{"task_id": "HumanEval/68", "completion": "arr = [4,2,3]\neven_values = [num for num in arr if num % 2 == 0]\nif not even_values:\n    result = []\nelse:\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    result = [min_even, min_even_index]\n\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/69", "completion": "max_freq = -1\nfor num in set(lst):\n    freq = lst.count(num)\n    if num > freq and freq >= max_freq:\n        max_freq = num\nmax_freq", "result": "timed out", "passed": false}
{"task_id": "HumanEval/70", "completion": "lst.sort()\nresult = []\nwhile lst:\n    result.append(lst.pop(0))\n    if lst:\n        result.append(lst.pop())\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/71", "completion": "if a + b > c and a + c > b and b + c > a:\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    result = round(area, 2)\nelse:\n    result = -1\n\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/72", "completion": "if q == q[::-1] and sum(q) <= w:\n    return True\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/73", "completion": "arr = [1,2,3,5,4,7,9,6]\nn = len(arr)\ndp = [[0 for _ in range(n)] for _ in range(n)]\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        j = i + l - 1\n        dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 if arr[i] != arr[j] else dp[i+1][j-1]\nprint(dp[0][n-1])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/74", "completion": "lst1_total = sum([len(x) for x in lst1])\nlst2_total = sum([len(x) for x in lst2])\n\nif lst1_total < lst2_total:\n    result = lst1\nelif lst2_total < lst1_total:\n    result = lst2\nelse:\n    result = lst1\n\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/75", "completion": "n = a\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nfor i in primes:\n    if n % i == 0:\n        n = n // i\nfor i in primes:\n    if n % i == 0:\n        n = n // i\nfor i in primes:\n    if n % i == 0:\n        n = n // i\nif n == 1:\n    print(True)\nelse:\n    print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/76", "completion": "if x == 1:\n    return n == 1\nwhile x % n == 0:\n    x /= n\nreturn x == 1", "result": "timed out", "passed": false}
{"task_id": "HumanEval/77", "completion": "if a < 0:\n    return False\nreturn (a ** (1/3)).is_integer()", "result": "timed out", "passed": false}
{"task_id": "HumanEval/78", "completion": "num = \"AB\"\ncount = 1\n\nfor digit in num:\n    if digit in ['2', '3', '5', '7', 'B', 'D']:\n        count += 1\n\nprint(count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/79", "completion": "decimal_to_binary = lambda decimal: f\"db{bin(decimal)[2:]}db\"", "result": "timed out", "passed": false}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n    return False\n    \nfor i in range(len(s) - 2):\n    if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n        return False\n        \nreturn True", "result": "timed out", "passed": false}
{"task_id": "HumanEval/81", "completion": "grades = [4.0, 3, 1.7, 2, 3.5]\nletter_grades = []\n\nfor grade in grades:\n    if grade == 4.0:\n        letter_grades.append('A+')\n    elif grade > 3.7:\n        letter_grades.append('A')\n    elif grade > 3.3:\n        letter_grades.append('A-')\n    elif grade > 3.0:\n        letter_grades.append('B+')\n    elif grade > 2.7:\n        letter_grades.append('B')\n    elif grade > 2.3:\n        letter_grades.append('B-')\n    elif grade > 2.0:\n        letter_grades.append('C+')\n    elif grade > 1.7:\n        letter_grades.append('C')\n    elif grade > 1.3:\n        letter_grades.append('C-')\n    elif grade > 1.0:\n        letter_grades.append('D+')\n    elif grade > 0.7:\n        letter_grades.append('D')\n    elif grade >= 0.0:\n        letter_grades.append('D-')\n    else:\n        letter_grades.append('E')\n\nprint(letter_grades)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/82", "completion": "if string == \"\":\n    return False\nif len(string) < 2:\n    return False\nfor i in range(2, int(len(string) ** 0.5) + 1):\n    if len(string) % i == 0:\n        return False\nreturn True", "result": "timed out", "passed": false}
{"task_id": "HumanEval/83", "completion": "count = 0\nfor i in range(10**(n-1), 10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n        count += 1\ncount", "result": "timed out", "passed": false}
{"task_id": "HumanEval/84", "completion": "N = 147\nprint(bin(sum(int(digit) for digit in str(N)))[2:])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/85", "completion": "total = sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/86", "completion": "s = input()\nresult = ' '.join([''.join(sorted(word)) for word in s.split()])\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/87", "completion": "lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n]\nx = 1\n\nresult = [(i, j) for i, row in enumerate(lst) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x]\nsorted(result, key=lambda x: (x[0], -x[1]))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/88", "completion": "array_copy = array.copy()\nif (array_copy[0] + array_copy[-1]) % 2 == 0:\n    array_copy.sort(reverse=True)\nelse:\n    array_copy.sort()", "result": "timed out", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join([chr((ord(char) - 97 + 2 * 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2 * 2) % 26 + 65) if char.isupper() else char for char in s])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/90", "completion": "min1 = float('inf')\nmin2 = float('inf')\nfor num in lst:\n    if num < min1:\n        min2 = min1\n        min1 = num\n    elif num < min2 and num != min1:\n        min2 = num\nif min2 == float('inf'):\n    print(None)\nelse:\n    print(min2)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/92", "completion": "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/93", "completion": "message = input()\nencoded_message = ''\nfor char in message:\n    if char.isalpha():\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    else:\n        encoded_message += char\n\nprint(encoded_message)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/94", "completion": "max_prime = 0\nfor num in lst:\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            if num > max_prime:\n                max_prime = num\n\nsum_digits = sum(int(digit) for digit in str(max_prime))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/95", "completion": "if not dict:\n    print(False)\nelse:\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        print(True)\n    else:\n        print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/96", "completion": "primes = []\nnum = 2\nwhile len(primes) < n:\n    for i in range(2, num):\n        if num % i == 0:\n            break\n    else:\n        primes.append(num)\n    num += 1\nreturn primes[:n]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/97", "completion": "a = 148\nb = 412\nprint((abs(a) % 10) * (abs(b) % 10))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/98", "completion": "s = input()\ncount = sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')\nprint(count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/99", "completion": "value = input()\nvalue = float(value)\nif value >= 0:\n    result = int(value + 0.5)\nelse:\n    result = int(value - 0.5)\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/100", "completion": "stones = [n]\nwhile n > 1:\n    if n % 2 == 0:\n        n += 1\n    else:\n        n += 2\n    stones.append(n)\n    n = n\nstones", "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "completion": "s = s.replace(\",\", \" \")\nwords = s.split()\nreturn words", "result": "timed out", "passed": false}
{"task_id": "HumanEval/102", "completion": "max_even = -1\nfor i in range(x, y+1):\n    if i % 2 == 0 and i > max_even:\n        max_even = i\nprint(max_even)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/103", "completion": "n, m = 20, 33\nif n > m:\n    print(-1)\nelse:\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    print(bin(avg))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/104", "completion": "x = [str(num) for num in x]\nresult = sorted([int(num) for num in x if all(int(digit) % 2 != 0 for digit in num)])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/105", "completion": "arr = [2, 1, 1, 4, 5, 8, 2, 3]\narr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\nresult = [ \"One\" if x == 1 else \"Two\" if x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x == 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else \"Nine\" for x in arr]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/106", "completion": "result = [1]\nfor i in range(1, n):\n    if i % 2 == 0:\n        result.append(result[-1] * i)\n    else:\n        result.append(sum(range(1, i+1)))\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/107", "completion": "even_odd_palindrome = lambda n: (sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0), sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/108", "completion": "arr = [int(str(abs(num))[0]) if num < 0 else int(str(num)[0]) for num in arr]\nreturn sum([1 for num in arr if sum(int(digit) for digit in str(num)) > 0])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/109", "completion": "arr_sorted = sorted(arr)\nreturn arr_sorted == arr or any(arr_sorted == arr[-i:] + arr[:-i] for i in range(1, len(arr)))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/110", "completion": "if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 1 for x in lst2):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "result": "timed out", "passed": false}
{"task_id": "HumanEval/111", "completion": "max_count = 0\nresult = {}\nfor char in test.split():\n    if char in result:\n        result[char] += 1\n    else:\n        result[char] = 1\n    if result[char] > max_count:\n        max_count = result[char]\n\noutput = {key: value for key, value in result.items() if value == max_count}\noutput", "result": "timed out", "passed": false}
{"task_id": "HumanEval/112", "completion": "s = input()\nc = input()\nresult = ''.join([char for char in s if char not in c])\nis_palindrome = result == result[::-1]\nprint((result, is_palindrome))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/113", "completion": "lst = ['1234567']\noutput = []\nfor s in lst:\n    count = sum(1 for c in s if int(c) % 2 != 0)\n    output.append(f\"the number of odd elements {count}n the str{count}ng {s} of the {count}nput.\")\n\noutput", "result": "timed out", "passed": false}
{"task_id": "HumanEval/114", "completion": "```python\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n```", "result": "timed out", "passed": false}
{"task_id": "HumanEval/115", "completion": "grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\ncapacity = 1\n\nrows = len(grid)\ncols = len(grid[0])\nbuckets = [0] * cols\ncount = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        if grid[i][j] == 1:\n            diff = capacity - buckets[j]\n            count += diff\n            buckets[j] += diff\n\nprint(count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/116", "completion": "arr.sort(key=lambda x: (bin(x).count('1'), x))\narr", "result": "timed out", "passed": false}
{"task_id": "HumanEval/117", "completion": "words = s.split()\nconsonants = 'bcdfghjklmnpqrstvwxyz'\nresult = [word for word in words if sum(1 for letter in word if letter.lower() in consonants) == n]\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/118", "completion": "word = word[::-1]\nvowels = \"aeiouAEIOU\"\nfor i in range(1, len(word)-1):\n    if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n        print(word[i])\n        break\nelse:\n    print(\"\")", "result": "timed out", "passed": false}
{"task_id": "HumanEval/119", "completion": "if lst[0].count('(') == lst[1].count(')'):\n    print('Yes')\nelse:\n    print('No')", "result": "timed out", "passed": false}
{"task_id": "HumanEval/120", "completion": "arr.sort(reverse=True)\nreturn arr[:k]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/121", "completion": "total = sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/122", "completion": "total = sum(num for num in arr[:k] if 10 <= num <= 99)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/123", "completion": "n = 5\nodd_collatz = [1]\nwhile n != 1:\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = 3 * n + 1\n    if n % 2 != 0:\n        odd_collatz.append(n)\nodd_collatz.sort()\nprint(odd_collatz)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/124", "completion": "if date:\n    month, day, year = date.split('-')\n    if len(year) == 4 and month.isdigit() and day.isdigit() and year.isdigit():\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if 1 <= day <= 31:\n                print(True)\n            else:\n                print(False)\n        elif month in [4, 6, 9, 11]:\n            if 1 <= day <= 30:\n                print(True)\n            else:\n                print(False)\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if 1 <= day <= 29:\n                    print(True)\n                else:\n                    print(False)\n            else:\n                if 1 <= day <= 28:\n                    print(True)\n                else:\n                    print(False)\n        else:\n            print(False)\n    else:\n        print(False)\nelse:\n    print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/125", "completion": "txt = \"Hello world!\"\nif ' ' in txt:\n    result = txt.split()\nelif ',' in txt:\n    result = txt.split(',')\nelse:\n    result = [char for char in txt if char.islower() and ord(char) % 2 != 0]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/126", "completion": "if all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst):\n    print(True)\nelse:\n    print(False)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/127", "completion": "if __name__ == \"__main__\":\n    interval1 = (1, 2)\n    interval2 = (2, 3)\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    is_prime = True if intersection_length > 1 and all(intersection_length % i != 0 for i in range(2, int(intersection_length**0.5) + 1)) else False\n    \n    if intersection_length <= 0:\n        print(\"NO\")\n    elif is_prime:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "result": "timed out", "passed": false}
{"task_id": "HumanEval/128", "completion": "arr = [1, 2, 2, -4]\nresult = sum(abs(num) for num in arr) * (1 if all(num >= 0 for num in arr) else -1 if all(num < 0 for num in arr) else 0) if arr else None", "result": "timed out", "passed": false}
{"task_id": "HumanEval/129", "completion": "grid = [[1,2,3],[4,5,6],[7,8,9]]\nk = 3\nvisited = set()\npath = []\nfor i in range(k):\n    min_val = float('inf')\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if grid[r][c] < min_val and (r, c) not in visited:\n                min_val = grid[r][c]\n                min_pos = (r, c)\n    path.append(min_val)\n    visited.add(min_pos)\npath", "result": "timed out", "passed": false}
{"task_id": "HumanEval/130", "completion": "tribonacci = lambda n: [3] + [1 + i // 2 if i % 2 == 0 else sum(tribonacci(i-1) + tribonacci(i-2) + tribonacci(i+1)) for i in range(1, n+1)]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/131", "completion": "n = 235\nproduct = 1\nwhile n > 0:\n    digit = n % 10\n    if digit % 2 != 0:\n        product *= digit\n    n //= 10\nproduct", "result": "timed out", "passed": false}
{"task_id": "HumanEval/132", "completion": "if '[' in string and ']' in string:\n    return True\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/133", "completion": "lst = [int(x) for x in lst]\nresult = sum([x**2 for x in lst])", "result": "timed out", "passed": false}
{"task_id": "HumanEval/134", "completion": "txt = txt.strip()\nreturn txt[-1].isalpha() and txt[-2] == \" \"", "result": "timed out", "passed": false}
{"task_id": "HumanEval/135", "completion": "max_index = -1\nfor i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n        max_index = i - 1\nreturn max_index", "result": "timed out", "passed": false}
{"task_id": "HumanEval/136", "completion": "lst = [x for x in lst if x != 0]\nnegatives = [x for x in lst if x < 0]\npositives = [x for x in lst if x > 0]\nreturn (max(negatives) if negatives else None, min(positives) if positives else None)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/137", "completion": "a = a.replace(\",\", \".\")\nb = b.replace(\",\", \".\")\nif type(a) == type(b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\nelse:\n    return max(a, b)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/138", "completion": "n = 8\ncount = 0\nfor i in range(2, n//2 + 1, 2):\n    for j in range(i, n//2 + 1, 2):\n        for k in range(j, n//2 + 1, 2):\n            for l in range(k, n//2 + 1, 2):\n                if i + j + k + l == n:\n                    count += 1\nprint(count == 1)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/139", "completion": "n = 4\nresult = 1\nfor i in range(1, n+1):\n    factorial = 1\n    for j in range(1, i+1):\n        factorial *= j\n    result *= factorial\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/140", "completion": "text = \" Example   3\"\noutput = \"\"\ncount = 0\n\nfor char in text:\n    if char == \" \":\n        count += 1\n        if count > 2:\n            output = output[:-1] + \"-\"\n    else:\n        if count > 2:\n            output += \"-\"\n        elif count > 0:\n            output += \"_\"\n        count = 0\n        output += char\n\nif count > 2:\n    output += \"-\"\nelif count > 0:\n    output += \"_\"\n\nprint(output)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/141", "completion": "if __name__ == \"__main__\":\n    file_name = input()\n    if file_name.count(\".\") == 1 and file_name.split(\".\")[0].isalpha() and file_name.split(\".\")[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name) <= 3:\n        print('Yes')\n    else:\n        print('No')", "result": "timed out", "passed": false}
{"task_id": "HumanEval/142", "completion": "lst = [i**2 if idx % 3 == 0 else i**3 if idx % 4 == 0 else i for idx, i in enumerate(lst)]\nresult = sum(lst)\nresult", "result": "timed out", "passed": false}
{"task_id": "HumanEval/143", "completion": "words = sentence.split()\nprime_words = [word for word in words if all(word.count(c) == 1 for c in word)]\nresult = ' '.join(prime_words)\nreturn result", "result": "timed out", "passed": false}
{"task_id": "HumanEval/144", "completion": "if eval(x) * eval(n) % 1 == 0:\n    return True\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/145", "completion": "nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/146", "completion": "nums = [num for num in nums if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0]\nreturn len(nums)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/147", "completion": "n=int(input())\na=[i*i-i+1 for i in range(1,n+1)]\ncount=0\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(j+1,n):\n            if (a[i]+a[j]+a[k])%3==0:\n                count+=1\nprint(count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/148", "completion": "if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] or planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n    print(())\nelse:\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index < end_index:\n        result = planets[start_index+1:end_index]\n    else:\n        result = planets[end_index+1:start_index]\n    print(tuple(result))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/149", "completion": "lst = [x for x in lst if len(x) % 2 == 0]\nreturn sorted(lst, key=lambda x: (len(x), x))", "result": "timed out", "passed": false}
{"task_id": "HumanEval/150", "completion": "if n < 2:\n    return y\nfor i in range(2, int(n ** 0.5) + 1):\n    if n % i == 0:\n        return y\nreturn x", "result": "timed out", "passed": false}
{"task_id": "HumanEval/151", "completion": "lst = [x**2 for x in lst if x > 0 and x % 2 != 0 and type(x) == int]\nreturn sum(lst) * 2", "result": "timed out", "passed": false}
{"task_id": "HumanEval/152", "completion": "game = [1,2,3,4,5,1]\nguess = [1,2,3,4,2,-2]\n\nresult = [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/153", "completion": "class Strongest_Extension:\n    def __init__(self, class_name, extensions):\n        self.class_name = class_name\n        self.extensions = extensions\n        self.strongest_extension = self.find_strongest_extension()\n\n    def find_strongest_extension(self):\n        max_strength = float('-inf')\n        strongest_extension = ''\n        for extension in self.extensions:\n            cap_count = sum(1 for char in extension if char.isupper())\n            sm_count = sum(1 for char in extension if char.islower())\n            strength = cap_count - sm_count\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        return strongest_extension\n\n    def get_result(self):\n        return f\"{self.class_name}.{self.strongest_extension}\"\n\n\nresult = Strongest_Extension('my_class', ['AA', 'Be', 'CC']).get_result()\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/154", "completion": "if b in a+a: return True\nfor i in range(1,len(b)):\n    if b in a[i:]+a[:i]: return True\nreturn False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/155", "completion": "num = str(abs(num))\neven_count = len([digit for digit in num if int(digit) % 2 == 0])\nodd_count = len([digit for digit in num if int(digit) % 2 != 0])\n(even_count, odd_count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/156", "completion": "numerals = [\n    (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n    (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n    (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n    (1, 'i')\n]\n\ndef int_to_mini_roman(number):\n    result = ''\n    for value, numeral in numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "result": "timed out", "passed": false}
{"task_id": "HumanEval/157", "completion": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n    return True\nelse:\n    return False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/158", "completion": "max_word = \"\"\nmax_count = 0\n\nfor word in words:\n    unique_chars = len(set(word))\n    if unique_chars > max_count or (unique_chars == max_count and word < max_word):\n        max_word = word\n        max_count = unique_chars\n\nmax_word", "result": "timed out", "passed": false}
{"task_id": "HumanEval/159", "completion": "number += remaining\nremaining = max(0, remaining - need)\n[number, remaining]", "result": "timed out", "passed": false}
{"task_id": "HumanEval/160", "completion": "operator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nexpression = str(operand[0])\nfor i in range(len(operator)):\n    expression += operator[i] + str(operand[i+1])\nresult = eval(expression)\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/161", "completion": "s = input()\nresult = ''.join([char.upper() if char.islower() else char.lower() for char in s]) if any(char.isalpha() for char in s) else s[::-1]\nprint(result)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "result": "timed out", "passed": false}
{"task_id": "HumanEval/163", "completion": "result = [int(i) for i in range(a, b+1) if all(int(digit) % 2 == 0 for digit in str(i))]", "result": "timed out", "passed": false}
